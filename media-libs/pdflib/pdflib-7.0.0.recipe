SUMMARY="A library for generating PDF files"
DESCRIPTION="PDFlib is a development tool for PDF-enabling your software, or generating PDF on \
your server. PDFlib saves you the intricate details of PDF generation by offering a simple-to-use \
API for programmatically creating PDF files from within your own server- or client-side software. \
PDFlib doesn't make use of third-party software for generating PDF, nor does it require any other \
tools.

This is the \"Lite\" version of PDFlib, which may only be used in open-source software."
HOMEPAGE="https://www.pdflib.com/"
COPYRIGHT="PDFlib GmbH"
LICENSE="PDFlib 5"
REVISION="1"
SOURCE_URI="http://download.nust.na/pub2/openpkg1/sources/DST/pdflib/PDFlib-Lite-$portVersion.tar.gz"
CHECKSUM_SHA256="7e9a402307060cd18f0f94d6e9dff7dfd08f13d62380acbb6594de508b561e86"
SOURCE_DIR="PDFlib-Lite-$portVersion"
PATCHES="pdflib-$portVersion.patchset"

ARCHITECTURES="all"
SECONDARY_ARCHITECTURES="x86"

libVersion="6.0.0"
libVersionCompat="$libVersion compat >= ${libVersion%%.*}"

# no devel package, due to licensing
PROVIDES="
	pdflib$secondaryArchSuffix = $portVersion
	cmd:pdflib_config$secondaryArchSuffix = $portVersion
	lib:libpdf$secondaryArchSuffix = $libVersionCompat
	devel:libpdf$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES="
	haiku$secondaryArchSuffix
	"

if [ -z "$secondaryArchSuffix" ]; then
	SUMMARY_tools="The pdflib tools"
	PROVIDES_tools="
		pdflib_tools = $portVersion
		cmd:pdfimage
		cmd:text2pdf
		"
	REQUIRES_tools="
		pdflib == $portVersion base
		haiku
		"
	CONFLICTS_tools="
		xpdf
		"
fi

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
BUILD_PREREQUIRES="
	cmd:gcc$secondaryArchSuffix
	cmd:ld
	cmd:libtool$secondaryArchSuffix
	cmd:libtoolize$secondaryArchSuffix
	cmd:make
	"

PATCH()
{
	if [ "$effectiveTargetArchitecture" == x86_gcc2 ]; then
		sed -i "s/-lstdc++/-lstdc++.r4/g" configure
	fi
}

BUILD()
{
	# for: error: ISO C++17 does not allow dynamic exception specifications
	# do not enable for gcc2
	if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
		export CFLAGS="-std=c++98"
	fi

	libtoolize -fci
	cp /bin$secondaryArchSubDir/libtool config/ltmain.sh
	runConfigure --omit-dirs "docDir dataRootDir" ./configure \
		--enable-shared --with-libm=-lroot --with-pic --without-PSP \
		--without-perl --disable-debug
	make $jobArgs
}

INSTALL()
{
	make install

	# remove libtool file
	rm $libDir/libpdf.la

	# documentation & examples -- we must include these due to licensing
	mkdir -p $docDir/
	cp -R doc/* $docDir/
	mkdir -p $developDir/sample-code/
	cp -R bind/pdflib/ $developDir/sample-code/

	prepareInstalledDevelLib libpdf

	# tools package
	if [ -z "$secondaryArchSuffix" ]; then
		packageEntries tools \
			$binDir/{pdfimage,text2pdf}
	fi

	# Remove stuff we don't need in the secondary architecture base package.
	if [ -n "$secondaryArchSuffix" ]; then
		rm -rf $binDir/{pdfimage,text2pdf}
	fi
}

TEST()
{
	make test
}
